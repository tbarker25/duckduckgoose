// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DuckDuckGoose_GetRole_FullMethodName    = "/duckduckgoose.v1.DuckDuckGoose/GetRole"
	DuckDuckGoose_GetNode_FullMethodName    = "/duckduckgoose.v1.DuckDuckGoose/GetNode"
	DuckDuckGoose_ListNodes_FullMethodName  = "/duckduckgoose.v1.DuckDuckGoose/ListNodes"
	DuckDuckGoose_DeleteNode_FullMethodName = "/duckduckgoose.v1.DuckDuckGoose/DeleteNode"
)

// DuckDuckGooseClient is the client API for DuckDuckGoose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DuckDuckGooseClient interface {
	GetRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error)
	ListNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNodesResponse, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type duckDuckGooseClient struct {
	cc grpc.ClientConnInterface
}

func NewDuckDuckGooseClient(cc grpc.ClientConnInterface) DuckDuckGooseClient {
	return &duckDuckGooseClient{cc}
}

func (c *duckDuckGooseClient) GetRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DuckDuckGoose_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duckDuckGooseClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, DuckDuckGoose_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duckDuckGooseClient) ListNodes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, DuckDuckGoose_ListNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *duckDuckGooseClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DuckDuckGoose_DeleteNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DuckDuckGooseServer is the server API for DuckDuckGoose service.
// All implementations must embed UnimplementedDuckDuckGooseServer
// for forward compatibility
type DuckDuckGooseServer interface {
	GetRole(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	GetNode(context.Context, *GetNodeRequest) (*Node, error)
	ListNodes(context.Context, *emptypb.Empty) (*ListNodesResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDuckDuckGooseServer()
}

// UnimplementedDuckDuckGooseServer must be embedded to have forward compatible implementations.
type UnimplementedDuckDuckGooseServer struct {
}

func (UnimplementedDuckDuckGooseServer) GetRole(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedDuckDuckGooseServer) GetNode(context.Context, *GetNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedDuckDuckGooseServer) ListNodes(context.Context, *emptypb.Empty) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedDuckDuckGooseServer) DeleteNode(context.Context, *DeleteNodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedDuckDuckGooseServer) mustEmbedUnimplementedDuckDuckGooseServer() {}

// UnsafeDuckDuckGooseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DuckDuckGooseServer will
// result in compilation errors.
type UnsafeDuckDuckGooseServer interface {
	mustEmbedUnimplementedDuckDuckGooseServer()
}

func RegisterDuckDuckGooseServer(s grpc.ServiceRegistrar, srv DuckDuckGooseServer) {
	s.RegisterService(&DuckDuckGoose_ServiceDesc, srv)
}

func _DuckDuckGoose_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuckDuckGooseServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuckDuckGoose_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuckDuckGooseServer).GetRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuckDuckGoose_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuckDuckGooseServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuckDuckGoose_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuckDuckGooseServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuckDuckGoose_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuckDuckGooseServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuckDuckGoose_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuckDuckGooseServer).ListNodes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DuckDuckGoose_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuckDuckGooseServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DuckDuckGoose_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuckDuckGooseServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DuckDuckGoose_ServiceDesc is the grpc.ServiceDesc for DuckDuckGoose service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DuckDuckGoose_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "duckduckgoose.v1.DuckDuckGoose",
	HandlerType: (*DuckDuckGooseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _DuckDuckGoose_GetRole_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _DuckDuckGoose_GetNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _DuckDuckGoose_ListNodes_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _DuckDuckGoose_DeleteNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
